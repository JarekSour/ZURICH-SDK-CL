{"version":3,"file":"slider.js","sourceRoot":"","sources":["../../src/inputs/slider.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\nimport { SVG_MINUS, SVG_PLUS } from '../constants/svg.js';\r\n\r\n@customElement('zcl-slider')\r\nexport class ZSlider extends LitElement {\r\n\r\n    @property({ type: Number }) min = 0;\r\n    @property({ type: Number }) max = 100;\r\n    @property({ type: Number }) step = 1;\r\n    @property({ type: Number }) value = 0;\r\n    @property({ type: Number }) uf!: number;\r\n    @property({ type: Boolean }) detailVisible = true;\r\n\r\n\r\n    private setWidth() {\r\n        const fraction = (this.value - this.min) / (this.max - this.min)\r\n        const percent = (fraction) * 100;\r\n        const thumbWidth = 25;\r\n\r\n        this.shadowRoot!.getElementById(\"ZSlider\")?.style.setProperty(\"--value\", `${percent}%`);\r\n        this.shadowRoot!.getElementById(\"tooltip\")!.style.left = `calc(${fraction * 100}% + ${(1 - fraction) * thumbWidth}px - ${11}px)`;\r\n        this.shadowRoot!.getElementById(\"tooltip\")!.innerHTML = `${this.formatNumber(this.value, 'UF')}<br>${this.formatNumber(this.value * Number(this.uf), '$')}`;\r\n\r\n        this.dispatchEvent(new CustomEvent('onChange', { detail: this.value }));\r\n    }\r\n\r\n    private slideMinus() {\r\n        if (this.value > this.min) {\r\n            this.value = this.value - this.step;\r\n            const ZSlider = this.shadowRoot!.getElementById(\"ZSlider\") as HTMLInputElement;\r\n            ZSlider.value = String(this.value);\r\n            this.setWidth();\r\n        }\r\n    }\r\n\r\n    private slidePlus() {\r\n        if (this.value < this.max) {\r\n            this.value = this.value + this.step;\r\n            const ZSlider = this.shadowRoot!.getElementById(\"ZSlider\") as HTMLInputElement;\r\n            ZSlider.value = String(this.value);\r\n            this.setWidth();\r\n        }\r\n    }\r\n\r\n    private formatNumber(value: number | string, currency: string) {\r\n        return `${currency} ${Number(value).toLocaleString('es-CL')}`;\r\n    }\r\n\r\n    private _oninput(e: Event) {\r\n        const { value } = e.target as HTMLInputElement;\r\n        this.value = Number(value);\r\n\r\n        this.setWidth();\r\n    }\r\n\r\n    static override  get styles() {\r\n        return css`\r\n\r\n            @font-face {\r\n                font-family: 'Zurich Sans';\r\n                src: url('../assets/fonts/ZURICH SANS/TRUTYPE/ZurichSans-light.ttf') format('truetype');\r\n                font-weight: normal;\r\n                font-style: normal;\r\n            }\r\n            :host {\r\n                font-family: 'Zurich Sans', 'Roboto', sans-serif;\r\n            }\r\n\r\n            .container {\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: space-between;\r\n                padding: 0 20px;\r\n\r\n                .detail-min-max{\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: space-between;\r\n                    color: #888C8D;\r\n                    font-size: 18px;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 550px) {\r\n                .container{\r\n                    .detail-min-max{\r\n                        flex-direction:column;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .slider-box {\r\n                display:flex;\r\n                flex: 1;\r\n                align-items: flex-end;\r\n\r\n                button{\r\n                    background-color: #fff;\r\n                    color: #0439aa;\r\n                    border: 1px solid #a8a8a8;\r\n                    width: 40px;\r\n                    height: 40px;\r\n                    border-radius: 50px;\r\n                    display:flex;\r\n                    align-items: center;\r\n                    cursor:pointer;\r\n                }\r\n            }\r\n\r\n            .slidecontainer {\r\n                width: 100%;\r\n            }\r\n\r\n            .slider {\r\n                -webkit-appearance: none;\r\n                width: 100%;\r\n                height: 15px;\r\n                border-radius: 25px;\r\n                background: #dee5e3;\r\n                outline: none;\r\n            }\r\n\r\n            .slider::-webkit-slider-thumb {\r\n                -webkit-appearance: none;\r\n                appearance: none;\r\n                width: 25px;\r\n                height: 25px;\r\n                border-radius: 50%;\r\n                background: #0439aa;\r\n                cursor: pointer;\r\n                margin-top: -5px;\r\n                border: 4px solid #ffffffbb;\r\n                position: relative;\r\n            }\r\n\r\n            .slider::-moz-range-thumb {\r\n                width: 30px;\r\n                height: 30px;\r\n                background: #ff0000;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .slider::-webkit-slider-runnable-track {\r\n                height: 15px;\r\n                cursor: pointer;\r\n                background: linear-gradient(\r\n                    to right,\r\n                    #2168ae 0%,\r\n                    #2168ae var(--value),\r\n                    #2168ae var(--value),\r\n                    #d3d3d3 var(--value),\r\n                   #d3d3d3 100%\r\n                );\r\n                border-radius: 25px;\r\n            }\r\n\r\n            .tooltip {\r\n                position: absolute;\r\n                background-color: #dbe3f5;\r\n                color: #23366d;\r\n                padding: 5px 12px;\r\n                border-radius: 5px;\r\n                font-size: 16px;\r\n                white-space: nowrap;\r\n                transform: translate(-50%, -167%);\r\n                text-align: center;\r\n            }\r\n\r\n            .tooltip::after {\r\n                content: \"\";\r\n                position: absolute;\r\n                bottom: -11px;\r\n                border-width: 6px;\r\n                border-style: solid;\r\n                border-color: #dbe3f5 transparent transparent transparent;\r\n                position: absolute;\r\n                left: 0;\r\n                right: 0;\r\n                margin-inline: auto;\r\n                width: fit-content;\r\n            }\r\n\r\n            .slider-container {\r\n                position: relative;\r\n                margin: 60px 30px 10px 30px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    override firstUpdated() {\r\n        if (this.uf === undefined)\r\n            throw new Error('The \"uf\" property is required and must be set.');\r\n\r\n        this.shadowRoot!.getElementById(\"tooltip\")!.innerHTML = `${this.formatNumber(this.value, 'UF')}<br>${this.formatNumber(this.value * Number(this.uf), '$')}`;\r\n        this.setWidth();\r\n    }\r\n\r\n    override render() {\r\n        return html`\r\n            <div class=\"container\">\r\n\r\n                ${this.detailVisible ? html`\r\n                    <div class=\"detail-min-max\">\r\n                        <span>Min. ${this.formatNumber(this.min, 'UF')} | ${this.formatNumber((this.min * this.uf), '$')}</span>\r\n                        <span>Max. ${this.formatNumber(this.max, 'UF')} | ${this.formatNumber((this.max * this.uf), '$')}</span>\r\n                    </div>`: html``\r\n            }\r\n\r\n                <div class=\"slider-box\">\r\n                    <button @click=${() => this.slideMinus()}>\r\n                        ${SVG_MINUS}\r\n                    </button>\r\n                    <div class=\"slidecontainer\">\r\n                        <div class=\"slider-container\">\r\n                            <input\r\n                                type=\"range\"\r\n                                min=\"${this.min}\"\r\n                                max=\"${this.max}\"\r\n                                step=\"${this.step}\"\r\n                                value=\"${this.value}\"\r\n                                class=\"slider\"\r\n                                id=\"ZSlider\"\r\n                                @input=${this._oninput}\r\n                            />\r\n                            <div class=\"tooltip\" id=\"tooltip\">\r\n                                UF 100<br />$ 100\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <button @click=${() => this.slidePlus()}>\r\n                        ${SVG_PLUS}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'zcl-slider': ZSlider;\r\n    }\r\n}"]}